name: Development Deploy

# Em qual situação quero que o pipeline rode
on:
  push:
    branches: [develop]

  # Assim podemos disparar também manualmente
  workflow_dispatch:


jobs:
  lint:
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.12.0

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.12.0

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build

      - name: Verify build success
        run: echo "Build completed successfully."

  deploy:
    name: Deploy to development
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: 15
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do Docker para autenticação
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login no Docker hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Configuração do Docker Compose passando as variáveis de ambiente
      - name: Run Docker Compose for Deployment
        env:
          NODE_ENV: ${{ vars.NODE_ENV }}
          PORT: ${{ vars.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_DEV }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST_DEV }}
          DATABASE_ROOT_USER: ${{ secrets.DATABASE_ROOT_USER_DEV }}
          DATABASE_ROOT_PASSWORD: ${{ secrets.DATABASE_ROOT_PASSWORD_DEV }}
          DATABASE_USER: ${{ secrets.DATABASE_USER_DEV }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD_DEV }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME_DEV }}
          EMAIL_TRANSPORTER: ${{ secrets.EMAIL_TRANSPORTER_DEV}}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD_DEV }}
        run: |
          echo "Deploying to Development Environment"
          docker-compose -f docker-compose.yml up -d